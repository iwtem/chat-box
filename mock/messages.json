[
  {
    "id": "55iTVEafbg1ZVcr3",
    "createdAt": "2025-05-21T10:12:52.843Z",
    "role": "user",
    "content": "如何在 js 中实现复制文字的功能",
    "parts": [{ "type": "text", "text": "如何在 js 中实现复制文字的功能" }]
  },
  {
    "id": "msg-mHxIzYXiR0ywUSOalh7NGa4l",
    "createdAt": "2025-05-21T10:12:54.423Z",
    "role": "assistant",
    "content": "<think>\n好的，用户问的是如何在JavaScript中实现复制文字的功能。首先，我需要确定用户的需求是什么。可能他们想在网页上有一个按钮，点击后可以复制文本到剪贴板。\n\n接下来，我要考虑常见的方法。通常，使用Clipboard API是现代的方法，但需要浏览器支持。不过，如果用户需要兼容旧版浏览器，可能需要用传统的方法，比如创建隐藏的input元素，然后触发复制事件。\n\n然后，我得回忆一下具体的实现步骤。例如，当用户点击按钮时，获取文本内容，创建一个input元素，设置其value为该文本，将其添加到DOM中，然后触发focus和select事件，最后通过document.execCommand('copy')来执行复制操作。不过要注意的是，这个方法在现代浏览器中可能不被推荐，因为execCommand已经不再支持。\n\n另外，用户可能需要处理不同的情况，比如文本是否为空，或者是否有选区。这时候需要考虑边界条件，避免出现错误。\n\n还要注意用户体验，比如提示用户复制成功，或者在复制后移除元素。同时，要确保代码的简洁性和可维护性，可能需要封装成函数，方便复用。\n\n最后，给出示例代码，并说明各个部分的作用。同时提醒用户关于兼容性和现代API的使用建议。如果有其他需求，比如支持富文本或处理不同内容类型，也可以进一步扩展。\n</think>\n\n在 JavaScript 中实现复制文字的功能，通常可以通过以下几种方式来完成：\n\n---\n\n### ✅ **1. 使用 `navigator.clipboard.writeText()`（推荐）**\n\n这是现代浏览器中推荐的方法，兼容性较好，并且是标准 API。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    navigator.clipboard.writeText(text)\n        .then(() => {\n            alert(\"文字已复制到剪贴板！\");\n        })\n        .catch(err => {\n            console.error(\"复制失败:\", err);\n            alert(\"无法复制文字，请尝试手动粘贴。\");\n        });\n}\n```\n\n#### 使用方式：\n```html\n<button onclick=\"copyToClipboard('这是要复制的文字')\">复制文本</button>\n```\n\n---\n\n### ✅ **2. 使用 `document.execCommand('copy')`（兼容性较差）**\n\n这是一个较老的 API，虽然在一些浏览器中仍然可用，但已不推荐使用。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    if (window.clipboard) {\n        window.clipboard.writeText(text)\n            .then(() => alert(\"文字已复制到剪贴板！\"))\n            .catch(err => alert(\"无法复制文字，请尝试手动粘贴。\"));\n    } else {\n        // 传统方法：创建隐藏的 input 元素\n        const input = document.createElement('input');\n        input.value = text;\n        document.body.appendChild(input);\n        input.select();\n        document.execCommand('copy');\n        document.body.removeChild(input);\n        alert(\"文字已复制到剪贴板！\");\n    }\n}\n```\n\n---\n\n### ✅ **3. 使用 `document.getSelection()` 和 `selection.createRange()`（兼容性较好）**\n\n适用于不支持 `navigator.clipboard` 的浏览器。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    const range = document.createRange();\n    const selection = window.getSelection();\n\n    if (selection && range) {\n        range.selectNodeContents(document.body);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        // 触发复制事件\n        document.execCommand('copy');\n        alert(\"文字已复制到剪贴板！\");\n    } else {\n        alert(\"无法复制文字，请尝试手动粘贴。\");\n    }\n}\n```\n\n---\n\n### ✅ **4. 复杂场景：支持富文本或多行文本**\n\n如果需要复制包含换行、格式的文本，可以使用 `document.execCommand('copy')` 时结合 `<pre>` 或 `<div>` 元素。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    const pre = document.createElement('pre');\n    pre.textContent = text;\n    document.body.appendChild(pre);\n    pre.select();\n    document.execCommand('copy');\n    document.body.removeChild(pre);\n    alert(\"文字已复制到剪贴板！\");\n}\n```\n\n---\n\n### ✅ **5. 处理边界情况（如空文本、无选区）**\n\n- 如果 `text` 为空，直接提示用户。\n- 如果没有选区，可以尝试使用 `selection.createRange()`。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    if (!text || !window.getSelection()) {\n        alert(\"请输入要复制的文字！\");\n        return;\n    }\n\n    const range = window.getSelection().getRangeAt(0);\n    const selection = window.getSelection();\n    const input = document.createElement('input');\n    input.value = text;\n    document.body.appendChild(input);\n    input.select();\n    document.execCommand('copy');\n    document.body.removeChild(input);\n    alert(\"文字已复制到剪贴板！\");\n}\n```\n\n---\n\n### ✅ **总结**\n\n| 方法 | 推荐性 | 优点 | 缺点 |\n|------|--------|------|------|\n| `navigator.clipboard.writeText()` | ✅（推荐） | 兼容性强，现代浏览器支持 | 需要用户交互（如点击按钮） |\n| `document.execCommand('copy')` | ❌（不推荐） | 传统 API，兼容性好 | 不再支持，已弃用 |\n| `selection.createRange()` | ✅ | 可以处理富文本 | 需要手动管理选区 |\n\n---\n\n### 📝 **注意事项**\n\n- 确保用户有权限复制内容（如在某些浏览器中可能需要弹出确认框）。\n- 在移动端或旧版浏览器中，可能需要额外的兼容性处理。\n- 如果是 Web 应用，建议使用 `navigator.clipboard.writeText()`。\n\n---\n\n如果你希望将这个功能集成到一个网页中，可以参考以下完整示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>复制文字功能</title>\n</head>\n<body>\n    <button onclick=\"copyToClipboard('这是要复制的文字')\">复制文本</button>\n\n    <script>\n        function copyToClipboard(text) {\n            if (!text || !window.getSelection()) {\n                alert(\"请输入要复制的文字！\");\n                return;\n            }\n\n            const range = window.getSelection().getRangeAt(0);\n            const input = document.createElement('input');\n            input.value = text;\n            document.body.appendChild(input);\n            input.select();\n            document.execCommand('copy');\n            document.body.removeChild(input);\n            alert(\"文字已复制到剪贴板！\");\n        }\n    </script>\n</body>\n</html>\n```\n\n---\n\n如需进一步扩展（如支持富文本、多行、格式化等），可以继续补充需求！",
    "parts": [
      { "type": "step-start" },
      {
        "type": "text",
        "text": "<think>\n好的，用户问的是如何在JavaScript中实现复制文字的功能。首先，我需要确定用户的需求是什么。可能他们想在网页上有一个按钮，点击后可以复制文本到剪贴板。\n\n接下来，我要考虑常见的方法。通常，使用Clipboard API是现代的方法，但需要浏览器支持。不过，如果用户需要兼容旧版浏览器，可能需要用传统的方法，比如创建隐藏的input元素，然后触发复制事件。\n\n然后，我得回忆一下具体的实现步骤。例如，当用户点击按钮时，获取文本内容，创建一个input元素，设置其value为该文本，将其添加到DOM中，然后触发focus和select事件，最后通过document.execCommand('copy')来执行复制操作。不过要注意的是，这个方法在现代浏览器中可能不被推荐，因为execCommand已经不再支持。\n\n另外，用户可能需要处理不同的情况，比如文本是否为空，或者是否有选区。这时候需要考虑边界条件，避免出现错误。\n\n还要注意用户体验，比如提示用户复制成功，或者在复制后移除元素。同时，要确保代码的简洁性和可维护性，可能需要封装成函数，方便复用。\n\n最后，给出示例代码，并说明各个部分的作用。同时提醒用户关于兼容性和现代API的使用建议。如果有其他需求，比如支持富文本或处理不同内容类型，也可以进一步扩展。\n</think>\n\n在 JavaScript 中实现复制文字的功能，通常可以通过以下几种方式来完成：\n\n---\n\n### ✅ **1. 使用 `navigator.clipboard.writeText()`（推荐）**\n\n这是现代浏览器中推荐的方法，兼容性较好，并且是标准 API。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    navigator.clipboard.writeText(text)\n        .then(() => {\n            alert(\"文字已复制到剪贴板！\");\n        })\n        .catch(err => {\n            console.error(\"复制失败:\", err);\n            alert(\"无法复制文字，请尝试手动粘贴。\");\n        });\n}\n```\n\n#### 使用方式：\n```html\n<button onclick=\"copyToClipboard('这是要复制的文字')\">复制文本</button>\n```\n\n---\n\n### ✅ **2. 使用 `document.execCommand('copy')`（兼容性较差）**\n\n这是一个较老的 API，虽然在一些浏览器中仍然可用，但已不推荐使用。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    if (window.clipboard) {\n        window.clipboard.writeText(text)\n            .then(() => alert(\"文字已复制到剪贴板！\"))\n            .catch(err => alert(\"无法复制文字，请尝试手动粘贴。\"));\n    } else {\n        // 传统方法：创建隐藏的 input 元素\n        const input = document.createElement('input');\n        input.value = text;\n        document.body.appendChild(input);\n        input.select();\n        document.execCommand('copy');\n        document.body.removeChild(input);\n        alert(\"文字已复制到剪贴板！\");\n    }\n}\n```\n\n---\n\n### ✅ **3. 使用 `document.getSelection()` 和 `selection.createRange()`（兼容性较好）**\n\n适用于不支持 `navigator.clipboard` 的浏览器。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    const range = document.createRange();\n    const selection = window.getSelection();\n\n    if (selection && range) {\n        range.selectNodeContents(document.body);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        // 触发复制事件\n        document.execCommand('copy');\n        alert(\"文字已复制到剪贴板！\");\n    } else {\n        alert(\"无法复制文字，请尝试手动粘贴。\");\n    }\n}\n```\n\n---\n\n### ✅ **4. 复杂场景：支持富文本或多行文本**\n\n如果需要复制包含换行、格式的文本，可以使用 `document.execCommand('copy')` 时结合 `<pre>` 或 `<div>` 元素。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    const pre = document.createElement('pre');\n    pre.textContent = text;\n    document.body.appendChild(pre);\n    pre.select();\n    document.execCommand('copy');\n    document.body.removeChild(pre);\n    alert(\"文字已复制到剪贴板！\");\n}\n```\n\n---\n\n### ✅ **5. 处理边界情况（如空文本、无选区）**\n\n- 如果 `text` 为空，直接提示用户。\n- 如果没有选区，可以尝试使用 `selection.createRange()`。\n\n#### 示例代码：\n```javascript\nfunction copyToClipboard(text) {\n    if (!text || !window.getSelection()) {\n        alert(\"请输入要复制的文字！\");\n        return;\n    }\n\n    const range = window.getSelection().getRangeAt(0);\n    const selection = window.getSelection();\n    const input = document.createElement('input');\n    input.value = text;\n    document.body.appendChild(input);\n    input.select();\n    document.execCommand('copy');\n    document.body.removeChild(input);\n    alert(\"文字已复制到剪贴板！\");\n}\n```\n\n---\n\n### ✅ **总结**\n\n| 方法 | 推荐性 | 优点 | 缺点 |\n|------|--------|------|------|\n| `navigator.clipboard.writeText()` | ✅（推荐） | 兼容性强，现代浏览器支持 | 需要用户交互（如点击按钮） |\n| `document.execCommand('copy')` | ❌（不推荐） | 传统 API，兼容性好 | 不再支持，已弃用 |\n| `selection.createRange()` | ✅ | 可以处理富文本 | 需要手动管理选区 |\n\n---\n\n### 📝 **注意事项**\n\n- 确保用户有权限复制内容（如在某些浏览器中可能需要弹出确认框）。\n- 在移动端或旧版浏览器中，可能需要额外的兼容性处理。\n- 如果是 Web 应用，建议使用 `navigator.clipboard.writeText()`。\n\n---\n\n如果你希望将这个功能集成到一个网页中，可以参考以下完整示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>复制文字功能</title>\n</head>\n<body>\n    <button onclick=\"copyToClipboard('这是要复制的文字')\">复制文本</button>\n\n    <script>\n        function copyToClipboard(text) {\n            if (!text || !window.getSelection()) {\n                alert(\"请输入要复制的文字！\");\n                return;\n            }\n\n            const range = window.getSelection().getRangeAt(0);\n            const input = document.createElement('input');\n            input.value = text;\n            document.body.appendChild(input);\n            input.select();\n            document.execCommand('copy');\n            document.body.removeChild(input);\n            alert(\"文字已复制到剪贴板！\");\n        }\n    </script>\n</body>\n</html>\n```\n\n---\n\n如需进一步扩展（如支持富文本、多行、格式化等），可以继续补充需求！"
      }
    ],
    "revisionId": "Udo2eKsCxyHEO6uc"
  },
  {
    "id": "fWaKFxYp1yRumJSv",
    "createdAt": "2025-05-21T15:25:25.378Z",
    "role": "user",
    "content": "给我一些数学公式",
    "parts": [{ "type": "text", "text": "给我一些数学公式" }]
  },
  {
    "id": "msg-7VTm8OPRdnWLJV6bbhSwLQNR",
    "createdAt": "2025-05-21T15:26:49.551Z",
    "role": "assistant",
    "content": "<think>\n好的，用户让我给他一些数学公式。首先，我需要确定他具体想要什么类型的数学公式。可能他是在学习某个学科，比如代数、几何、微积分，或者物理相关的公式？也有可能只是想看看常见的数学表达式。\n\n考虑到用户之前的问题是关于JavaScript实现复制文字的功能，现在突然问数学公式，可能是他在做某种项目，需要展示公式，或者在准备考试，需要复习一些基本的公式。不过也有可能他只是好奇，想要一些例子。\n\n接下来，我应该覆盖不同领域的数学公式，这样能满足各种可能的需求。比如代数、几何、微积分、概率统计、物理公式等。每个领域选几个常见的公式，并给出简要说明，这样用户能快速找到需要的内容。\n\n另外，用户可能对公式的呈现方式有要求，比如是否需要用LaTeX格式？因为之前的例子中使用了Mermaid，但数学公式通常用LaTeX表示。不过用户没有明确说明，所以最好还是提供LaTeX代码，并指出如何在不同环境中使用这些公式。\n\n还要注意公式的准确性，确保每个公式都是正确的，避免错误的信息误导用户。比如勾股定理、二次方程求根公式等是基础且常见的，应该包括进去。\n\n可能还需要考虑用户的水平，是否需要更复杂的公式还是基础的？由于没有明确说明，所以最好涵盖从基础到中等难度的内容，让用户有选择的空间。\n\n最后，总结一下各个领域的例子，并给出使用建议，比如如何在Markdown或LaTeX中显示这些公式。这样用户可以根据自己的需求进行调整和应用。\n</think>\n\n以下是一些常见的数学公式示例，涵盖了代数、几何、微积分、概率统计等多个领域：\n\n---\n\n### 📐 **1. 代数公式**\n- **二次方程求根公式**  \n  $$\n  ax^2 + bx + c = 0 \\quad \\Rightarrow \\quad x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n  $$\n\n- **因式分解公式**  \n  $$\n  a^2 - b^2 = (a - b)(a + b)\n  $$\n\n- **立方差公式**  \n  $$\n  a^3 - b^3 = (a - b)(a^2 + ab + b^2)\n  $$\n\n---\n\n### 📐 **2. 几何公式**\n- **勾股定理（直角三角形）**  \n  $$\n  a^2 + b^2 = c^2\n  $$\n\n- **圆的周长和面积**  \n  $$\n  C = 2\\pi r \\quad \\text{或} \\quad A = \\pi r^2\n  $$\n\n- **三角形面积公式（底×高÷2）**  \n  $$\n  S = \\frac{1}{2} \\cdot \\text{base} \\cdot \\text{height}\n  $$\n\n---\n\n### 📐 **3. 微积分公式**\n- **导数基本规则**  \n  - 常数的导数：$\\frac{d}{dx}(c) = 0$  \n  - 幂函数导数：$\\frac{d}{dx}(x^n) = nx^{n-1}$  \n  - 指数函数导数：$\\frac{d}{dx}e^x = e^x$\n\n- **积分基本公式**  \n  $$\n  \\int x^n dx = \\frac{x^{n+1}}{n+1} + C \\quad (n \\neq -1)\n  $$\n\n- **微分中值定理**  \n  若函数 $f(x)$ 在区间 $[a, b]$ 上连续，且在 $(a, b)$ 内可导，则存在 $\\xi \\in (a, b)$，使得：  \n  $$\n  f'(\\xi) = \\frac{f(b) - f(a)}{b - a}\n  $$\n\n---\n\n### 📐 **4. 概率与统计公式**\n- **概率加法公式**  \n  $$\n  P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\n  $$\n\n- **期望值（离散随机变量）**  \n  $$\n  E[X] = \\sum_{i} x_i \\cdot P(X = x_i)\n  $$\n\n- **方差公式**  \n  $$\n  \\text{Var}(X) = E[X^2] - (E[X])^2\n  $$\n\n---\n\n### 📐 **5. 物理相关公式**\n- **牛顿第二定律**  \n  $$\n  F = ma\n  $$\n\n- **动能公式**  \n  $$\n  KE = \\frac{1}{2}mv^2\n  $$\n\n- **万有引力公式**  \n  $$\n  F = G \\cdot \\frac{m_1 m_2}{r^2}\n  $$\n\n---\n\n### 📐 **6. 线性代数公式**\n- **矩阵乘法**  \n  若 $A$ 是 $m \\times n$ 矩阵，$B$ 是 $n \\times p$ 矩阵，则：  \n  $$\n  (AB)_{ij} = \\sum_{k=1}^n A_{ik} B_{kj}\n  $$\n\n- **行列式公式（2x2矩阵）**  \n  $$\n  \\text{det}\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n  $$\n\n---\n\n### 📐 **7. 数列与级数**\n- **等差数列通项公式**  \n  $$\n  a_n = a_1 + (n - 1)d\n  $$\n\n- **等比数列求和公式**  \n  $$\n  S_n = \\frac{a_1(1 - r^n)}{1 - r} \\quad (r \\neq 1)\n  $$\n\n---\n\n### 📐 **8. 复数与三角函数**\n- **欧拉公式（复指数）**  \n  $$\n  e^{i\\theta} = \\cos\\theta + i\\sin\\theta\n  $$\n\n- **正弦定理**  \n  在任意三角形中：  \n  $$\n  \\frac{a}{\\sin A} = \\frac{b}{\\sin B} = \\frac{c}{\\sin C}\n  $$\n\n---\n\n### 📐 **9. 微分方程**\n- **一阶线性微分方程**  \n  $$\n  \\frac{dy}{dx} + P(x)y = Q(x)\n  $$\n\n- **齐次方程解法**  \n  若方程为 $\\frac{dy}{dx} = f\\left(\\frac{y}{x}\\right)$，可设 $y = vx$。\n\n---\n\n### 📐 **10. 数论公式**\n- **欧拉定理（模运算）**  \n  若 $a$ 和 $n$ 互质，则：  \n  $$\n  a^{\\phi(n)} \\equiv 1 \\pmod{n}\n  $$\n\n- **费马小定理**  \n  若 $p$ 是素数，且 $a$ 不被 $p$ 整除，则：  \n  $$\n  a^{p-1} \\equiv 1 \\pmod{p}\n  $$\n\n---\n\n### 📌 使用建议\n- 如果你需要在 **Markdown** 或 **LaTeX** 中显示这些公式，可以直接使用上述 LaTeX 格式。\n- 在编程中（如 Python 的 SymPy 库），可以利用符号计算工具推导复杂公式。\n\n如果你有特定领域的需求（如物理、工程、计算机科学等），可以告诉我，我会提供更针对性的公式！",
    "parts": [
      { "type": "step-start" },
      {
        "type": "text",
        "text": "<think>\n好的，用户让我给他一些数学公式。首先，我需要确定他具体想要什么类型的数学公式。可能他是在学习某个学科，比如代数、几何、微积分，或者物理相关的公式？也有可能只是想看看常见的数学表达式。\n\n考虑到用户之前的问题是关于JavaScript实现复制文字的功能，现在突然问数学公式，可能是他在做某种项目，需要展示公式，或者在准备考试，需要复习一些基本的公式。不过也有可能他只是好奇，想要一些例子。\n\n接下来，我应该覆盖不同领域的数学公式，这样能满足各种可能的需求。比如代数、几何、微积分、概率统计、物理公式等。每个领域选几个常见的公式，并给出简要说明，这样用户能快速找到需要的内容。\n\n另外，用户可能对公式的呈现方式有要求，比如是否需要用LaTeX格式？因为之前的例子中使用了Mermaid，但数学公式通常用LaTeX表示。不过用户没有明确说明，所以最好还是提供LaTeX代码，并指出如何在不同环境中使用这些公式。\n\n还要注意公式的准确性，确保每个公式都是正确的，避免错误的信息误导用户。比如勾股定理、二次方程求根公式等是基础且常见的，应该包括进去。\n\n可能还需要考虑用户的水平，是否需要更复杂的公式还是基础的？由于没有明确说明，所以最好涵盖从基础到中等难度的内容，让用户有选择的空间。\n\n最后，总结一下各个领域的例子，并给出使用建议，比如如何在Markdown或LaTeX中显示这些公式。这样用户可以根据自己的需求进行调整和应用。\n</think>\n\n以下是一些常见的数学公式示例，涵盖了代数、几何、微积分、概率统计等多个领域：\n\n---\n\n### 📐 **1. 代数公式**\n- **二次方程求根公式**  \n  $$\n  ax^2 + bx + c = 0 \\quad \\Rightarrow \\quad x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n  $$\n\n- **因式分解公式**  \n  $$\n  a^2 - b^2 = (a - b)(a + b)\n  $$\n\n- **立方差公式**  \n  $$\n  a^3 - b^3 = (a - b)(a^2 + ab + b^2)\n  $$\n\n---\n\n### 📐 **2. 几何公式**\n- **勾股定理（直角三角形）**  \n  $$\n  a^2 + b^2 = c^2\n  $$\n\n- **圆的周长和面积**  \n  $$\n  C = 2\\pi r \\quad \\text{或} \\quad A = \\pi r^2\n  $$\n\n- **三角形面积公式（底×高÷2）**  \n  $$\n  S = \\frac{1}{2} \\cdot \\text{base} \\cdot \\text{height}\n  $$\n\n---\n\n### 📐 **3. 微积分公式**\n- **导数基本规则**  \n  - 常数的导数：$\\frac{d}{dx}(c) = 0$  \n  - 幂函数导数：$\\frac{d}{dx}(x^n) = nx^{n-1}$  \n  - 指数函数导数：$\\frac{d}{dx}e^x = e^x$\n\n- **积分基本公式**  \n  $$\n  \\int x^n dx = \\frac{x^{n+1}}{n+1} + C \\quad (n \\neq -1)\n  $$\n\n- **微分中值定理**  \n  若函数 $f(x)$ 在区间 $[a, b]$ 上连续，且在 $(a, b)$ 内可导，则存在 $\\xi \\in (a, b)$，使得：  \n  $$\n  f'(\\xi) = \\frac{f(b) - f(a)}{b - a}\n  $$\n\n---\n\n### 📐 **4. 概率与统计公式**\n- **概率加法公式**  \n  $$\n  P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\n  $$\n\n- **期望值（离散随机变量）**  \n  $$\n  E[X] = \\sum_{i} x_i \\cdot P(X = x_i)\n  $$\n\n- **方差公式**  \n  $$\n  \\text{Var}(X) = E[X^2] - (E[X])^2\n  $$\n\n---\n\n### 📐 **5. 物理相关公式**\n- **牛顿第二定律**  \n  $$\n  F = ma\n  $$\n\n- **动能公式**  \n  $$\n  KE = \\frac{1}{2}mv^2\n  $$\n\n- **万有引力公式**  \n  $$\n  F = G \\cdot \\frac{m_1 m_2}{r^2}\n  $$\n\n---\n\n### 📐 **6. 线性代数公式**\n- **矩阵乘法**  \n  若 $A$ 是 $m \\times n$ 矩阵，$B$ 是 $n \\times p$ 矩阵，则：  \n  $$\n  (AB)_{ij} = \\sum_{k=1}^n A_{ik} B_{kj}\n  $$\n\n- **行列式公式（2x2矩阵）**  \n  $$\n  \\text{det}\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n  $$\n\n---\n\n### 📐 **7. 数列与级数**\n- **等差数列通项公式**  \n  $$\n  a_n = a_1 + (n - 1)d\n  $$\n\n- **等比数列求和公式**  \n  $$\n  S_n = \\frac{a_1(1 - r^n)}{1 - r} \\quad (r \\neq 1)\n  $$\n\n---\n\n### 📐 **8. 复数与三角函数**\n- **欧拉公式（复指数）**  \n  $$\n  e^{i\\theta} = \\cos\\theta + i\\sin\\theta\n  $$\n\n- **正弦定理**  \n  在任意三角形中：  \n  $$\n  \\frac{a}{\\sin A} = \\frac{b}{\\sin B} = \\frac{c}{\\sin C}\n  $$\n\n---\n\n### 📐 **9. 微分方程**\n- **一阶线性微分方程**  \n  $$\n  \\frac{dy}{dx} + P(x)y = Q(x)\n  $$\n\n- **齐次方程解法**  \n  若方程为 $\\frac{dy}{dx} = f\\left(\\frac{y}{x}\\right)$，可设 $y = vx$。\n\n---\n\n### 📐 **10. 数论公式**\n- **欧拉定理（模运算）**  \n  若 $a$ 和 $n$ 互质，则：  \n  $$\n  a^{\\phi(n)} \\equiv 1 \\pmod{n}\n  $$\n\n- **费马小定理**  \n  若 $p$ 是素数，且 $a$ 不被 $p$ 整除，则：  \n  $$\n  a^{p-1} \\equiv 1 \\pmod{p}\n  $$\n\n---\n\n### 📌 使用建议\n- 如果你需要在 **Markdown** 或 **LaTeX** 中显示这些公式，可以直接使用上述 LaTeX 格式。\n- 在编程中（如 Python 的 SymPy 库），可以利用符号计算工具推导复杂公式。\n\n如果你有特定领域的需求（如物理、工程、计算机科学等），可以告诉我，我会提供更针对性的公式！"
      }
    ],
    "revisionId": "ZXZxgwBsbgaJNxSV"
  }
]
